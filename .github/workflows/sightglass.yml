name: sightglass

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: info

  # The Wasmtime commit that we build the bench API from for testing. Bumping
  # this will automatically cause us to update our CI cache on the next run.
  WASMTIME_COMMIT: "a2e71dafac4d2e42ed6edbc77081d39a40f4c3ff"

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - run: rustup component add rustfmt
    - run: cargo fmt --all -- --check

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2

    - name: Install nightly
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly

    - name: Build all
      run: cargo +nightly build --verbose --all

    # In order to cache the built Wasmtime engine, we specify a known directory path to put it in:
    # `<repo>/target/engines`. We avoid using the system cache directory since this can have OS
    # differences (e.g., `/home/.../.local/share`).
    - name: Setup SIGHTGLASS_CACHE_DIR (non-Windows)
      if: runner.os != 'Windows'
      run: echo "SIGHTGLASS_CACHE_DIR=$(pwd)/target/engines" >> $GITHUB_ENV
    - name: Setup SIGHTGLASS_CACHE_DIR  (Windows)
      if: runner.os == 'Windows'
      run: echo "SIGHTGLASS_CACHE_DIR=$(pwd)\\target\\engines" >> $env:GITHUB_ENV

    # If the Wasmtime engine has been previously built, we can save time by loading a cached copy
    # of it to the `SIGHTGLASS_CACHE_DIR`.
    - name: Download cached Wasmtime engine
      uses: actions/cache@v2
      id: wasmtime-engine-cache
      with:
        path: ${{env.SIGHTGLASS_CACHE_DIR}}
        key: wasmtime-${{ runner.os }}-${{ env.WASMTIME_COMMIT }}

    # If the cache is invalidated, we build the engine into the `SIGHTGLASS_CACHE_DIR`.
    - name: Build Wasmtime engine
      if: steps.wasmtime-engine-cache.outputs.cache-hit != 'true'
      env:
        RUST_LOG: trace
        RUST_BACKTRACE: 1
      run: |
           mkdir -p ${{env.SIGHTGLASS_CACHE_DIR}}
           cargo +nightly run -- build-engine wasmtime?REVISION=${{env.WASMTIME_COMMIT}}
           cargo +nightly run -- list-engines

    - name: Test all
      env:
        SIGHTGLASS_CACHE_DIR: ${{env.GITHUB_WORKSPACE}}/target/engines
      run: cargo +nightly test --verbose --all
